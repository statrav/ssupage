---
title: "Ambiguous Query에 대한 RAG의 성능 문제를 해결하기 위한 Query 분해"
subtitle: "Handling Ambiguous Queries Through Query Decomposition in a RAG Setting"
description: "모호한 질문을 처리할 때 발생하는 RAG의 문제를 발견하고, 해결하는 연구입니다."
image: ../images/2_ambig/thumbnail.png
author: "Hyesu Hwang"
date: "2024-08-15"
categories: [Python, Pytorch, Text, RAG, OpenSource]
open-graph:
  description: "Handling Ambiguous Queries Through Query Decomposition in a RAG Setting"
  image: ../images/2_ambig/thumbnail.png
twitter-card:
  description: "Handling Ambiguous Queries Through Query Decomposition in a RAG Setting"
  image: ../images/2_ambig/thumbnail.png
---

## ⭐ 프로젝트 소개

- 기간: 2024. 01 - 2024. 08
- 논문: CKAIA2024 게재
- 한 줄 소개: 잘못된 가정을 포함하고 있는 모호한 Query에 대한 RAG의 성능 문제를 발견하고, Query 분해를 통해 문제를 해결합니다.

![](../images/2_ambig/main2.png)

## 💎 왜 이 프로젝트가 중요한가?

#### 문제 제기

- 사용자가 입력하는 질문이 항상 올바르지는 않습니다. 잘못된 가정이나 사실이 포함된 질의(Query)가 자주 발생할 수 있습니다.
- 그렇다면 잘못된 가정을 포함한 Query에 대해서도 RAG(Retrieval-Augmented Generation)는 좋은 성능을 발휘할 수 있을까요?

#### 목표

- 잘못된 가정을 포함한 모호한 질문에 대한 RAG의 성능을 분석함으로써, RAG의 안정성을 높이고 더 신뢰할 수 있는 답변을 생성하는 방법을 모색합니다.


## 🔎 핵심 기술은 무엇인가?

#### 사용 기술
- Llama-2-7b-chat-hf
- ElasticSearch
- BM25

#### 적용 방법
- 질문 분해(Query Decomposition): 사용자의 Query를 여러 하위 Query로 나누기 위해, LLM에 적절한 프롬프트를 제공합니다.
- 답변 생성(Answer Generation): 검색된 하위 Query 기반의 추가 맥락 정보를 바탕으로, LLM이 최종 답변을 생성하도록 합니다.

## 💡 어떠한 사고방식/생각을 거쳤는가?

#### 문제 발견
- 사람들이 항상 올바르고 정확한 질문을 던지지는 않을 것이라고 생각했습니다.
- 잘못된 질문이란 어떤 형태일까? 중의적이거나 사실과 다른 가정을 포함한 질문일 수 있습니다.
- 그렇다면 이러한 질문에 대해 검색된 정보가 과연 정확할까? 잘못된 가정을 걸러낼 수 있을까?
- RAG는 검색된 정보를 바탕으로 답변을 생성하기 때문에, 잘못된 가정을 포함한 Query가 RAG의 성능에 부정적 영향을 미칠 가능성이 있다고 판단했습니다.

#### 문제 증명
- 잘못된 가정을 담고 있는 dataset을 통해 RAG의 성능을 확인하고자 했습니다.
  - 정량적, 정성적으로 성능을 확인
- 결과적으로 검색된 정보가 부정확하거나 불필요한 잡음을 포함하여 LLM의 성능을 저하시킴을 확인했습니다.

#### 방법 접근
- 잘못된 정보를 필터링하여 검색하기 위해 필요한 것은 무엇일까?
  - Query의 내재적 의미와 가정을 분해하고 검증하는 과정이 필요하다고 판단했습니다.
  - 이를 위해 Query를 의미론적으로 쪼개고, 각 하위 Query를 개별적으로 검증하는 방법을 모색했습니다.

## 🌄 어떠한 시행착오를 겪었는가?

#### 방법론 개발
- Query 분해 방법 연구:
  - NLTK 활용: 구문별로 Query를 분해
  - t5 모델 활용: `unikei/t5-base-split-and-rephrase` 모델로 복잡한 문장을 의미를 보존하면서 짧은 문장으로 분해
    - (Narayan et al., 2017): Split-and-rephrase는 복잡한 문장을 의미가 유지된 상태로 짧은 문장으로 나누는 작업이다.
  - LLM API 활용: gpt-3.5-turbo API와 프롬프트 엔지니어링을 통해 Query 분해 성능 개선

## 🧶 부록

### 파이프라인

![](../images/2_ambig/method.png)

### 메인 실험 결과

**정량적 결과**
![](../images/2_ambig/table.png)

**정성적 결과**
![](../images/2_ambig/fig_ex.png)